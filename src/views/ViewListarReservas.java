/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package views;

import Entidades.*;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.*;

/**
 *
 * @author salon
 */
public class ViewListarReservas extends javax.swing.JInternalFrame {

    private ReservaData reservaData;
    private Reserva reserva;
    private MesaData mesaData;
    private Mesa mesa;

    private DefaultTableModel modeloTabla = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int fila, int columna) {
            if (columna == 2 || columna == 3 || columna == 4 || columna == 5) {

                return true;
            }
            return false;
        }
    };

    /**
     * Creates new form ViewListarReservas
     */
    public ViewListarReservas() {
        reservaData = new ReservaData();
        reserva = new Reserva();
        mesaData = new MesaData();
        mesa = new Mesa();
        initComponents();
        armarCabecera();
        cargarComboIdReserva();
        cargarComboNumero();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtReservas = new javax.swing.JTable();
        jcbReservaId = new javax.swing.JComboBox<>();
        jcbMesaId = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jbEliminar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jbTodas = new javax.swing.JButton();
        jbModificar = new javax.swing.JButton();
        jbOrdenar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtReservas.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtReservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtReservas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtReservasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtReservas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 610, 180));

        jcbReservaId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jcbReservaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbReservaIdActionPerformed(evt);
            }
        });
        jPanel1.add(jcbReservaId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 80, 30));

        jcbMesaId.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jcbMesaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMesaIdActionPerformed(evt);
            }
        });
        jPanel1.add(jcbMesaId, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 80, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel1.setText("Lista de reservas");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel2.setText("Id reserva:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jLabel3.setText("Numero mesa:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jbEliminar.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jbEliminar.setText("Eliminar");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(jbEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        jbSalir.setBackground(new java.awt.Color(204, 204, 204));
        jbSalir.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jbSalir.setForeground(new java.awt.Color(255, 255, 255));
        jbSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cruz.png"))); // NOI18N
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });
        jPanel1.add(jbSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 10, -1, -1));

        jbTodas.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jbTodas.setText("Mostrar todas");
        jbTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTodasActionPerformed(evt);
            }
        });
        jPanel1.add(jbTodas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 140, -1));

        jbModificar.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jbModificar.setText("Modificar");
        jbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarActionPerformed(evt);
            }
        });
        jPanel1.add(jbModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, -1));

        jbOrdenar.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        jbOrdenar.setText("Ordenar por fecha");
        jbOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOrdenarActionPerformed(evt);
            }
        });
        jPanel1.add(jbOrdenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo 3.png"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 340));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jcbReservaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbReservaIdActionPerformed
        // TODO add your handling code here:
        cargarDatos();
    }//GEN-LAST:event_jcbReservaIdActionPerformed

    private void jbTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTodasActionPerformed
        // TODO add your handling code here:
        tablaCompleta();
    }//GEN-LAST:event_jbTodasActionPerformed

    private void jcbMesaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMesaIdActionPerformed
        // TODO add your handling code here:
        cargarDatosIdMesa();
    }//GEN-LAST:event_jcbMesaIdActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        // TODO add your handling code here:
        int filaSelect = jtReservas.getSelectedRow();
        if (filaSelect != -1) {
            int id_reserva = (Integer) jtReservas.getValueAt(filaSelect, 0);
            int confirm = JOptionPane.showConfirmDialog(this, "¿Eliminar la reserva con id " + reservaData.buscarReserva(id_reserva) + "?", "Eliminar reserva", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                reservaData.eliminarReserva(id_reserva);
                modeloTabla.removeRow(filaSelect);
                JOptionPane.showMessageDialog(this, "¡Reserva eliminada!");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbEliminarActionPerformed

    private void jtReservasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtReservasMouseClicked
        // TODO add your handling code here: 
//        int filaSelected = jtReservas.getSelectedRow();
//        if (filaSelected != -1) {
//
//        }


    }//GEN-LAST:event_jtReservasMouseClicked

    private void jbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarActionPerformed
        // TODO add your handling code here:

        
        int filaSelect = jtReservas.getSelectedRow();

        if (filaSelect != -1) {
            
            Object idReservaObj = jtReservas.getValueAt(filaSelect, 0);
            int id_reserva = 0;
            
            if (idReservaObj instanceof String) {
                
                try {
                    
                    id_reserva = Integer.parseInt((String) idReservaObj);
                    
                } catch (NumberFormatException e) {
                    
                    JOptionPane.showMessageDialog(this, "El ID de la reserva no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    return;
                }
            } else if (idReservaObj instanceof Integer) {
                id_reserva = (Integer) idReservaObj;
            }

   
            Object dniObj = jtReservas.getValueAt(filaSelect, 2);
            int din = 0;
            if (dniObj instanceof String) {
                
                try {
                    
                    String dniStr = (String) dniObj;
                    
                    if (dniStr.length() == 8 && dniStr.matches("\\d+")) { // Verificar que tenga 8 dígitos y sea numérico
                        
                        din = Integer.parseInt(dniStr);
                        
                    } else if (dniStr.length() != 8) {
                        JOptionPane.showMessageDialog(this, "El DNI debe tener exactamente 8 caracteres", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    } else {
                        
                        JOptionPane.showMessageDialog(this, "El DNI debe contener solo números", "Error", JOptionPane.ERROR_MESSAGE);
                        
                        return;
                    }
                } catch (NumberFormatException e) {
                    
                    JOptionPane.showMessageDialog(this, "El valor de DNI no es válido. Debe ser numérico", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    return;
                }
            } else if (dniObj instanceof Integer) {
                din = (Integer) dniObj;
            }

           
            String nombre = (String) jtReservas.getValueAt(filaSelect, 3);

           
            Object fechaObj = jtReservas.getValueAt(filaSelect, 4);
            
            LocalDate fecha = null;
            if (fechaObj instanceof String) {
                
                try {
                    
                    fecha = LocalDate.parse((String) fechaObj); 
                    
                } catch (DateTimeParseException e) {
                    
                    JOptionPane.showMessageDialog(this, "La fecha no es válida. Debe cumplir el siguiente formato: yyyy-mm-dd", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    return;
                }
            } else if (fechaObj instanceof LocalDate) {
                
                fecha = (LocalDate) fechaObj;
                
            }
            
            
           Object numeroObj = jtReservas.getValueAt(filaSelect, 5);
            int numero = 0;
            Mesa mesa= new Mesa();
            
            if (numeroObj instanceof String) {
                
                try {
                    
                    numero = Integer.parseInt((String) numeroObj);
                    mesa = mesaData.obtenerMesaActivaPorNumero(numero);
                    
                } catch (NumberFormatException e) {
                    
                    JOptionPane.showMessageDialog(this, "El numero de la mesa no es válido.", "Error", JOptionPane.ERROR_MESSAGE);
                    
                    return;
                }
                
            } else if (numeroObj instanceof Integer) {
                
                numero = (Integer) idReservaObj;
                
            }
         
            int confirm = JOptionPane.showConfirmDialog(this, "¿Modificar reserva?", "Modificar reserva", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
               
                reservaData.actualizarReserva(mesa,nombre, din, fecha, id_reserva);
                
                modeloTabla.removeRow(filaSelect);
                JOptionPane.showMessageDialog(this, "¡Reserva modificada!");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila", "Error", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jbModificarActionPerformed

    private void jbOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOrdenarActionPerformed
        // TODO add your handling code here:
          tablaCompletaOrdenada();
    }//GEN-LAST:event_jbOrdenarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbModificar;
    private javax.swing.JButton jbOrdenar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JButton jbTodas;
    private javax.swing.JComboBox<Integer> jcbMesaId;
    private javax.swing.JComboBox<Reserva> jcbReservaId;
    private javax.swing.JTable jtReservas;
    // End of variables declaration//GEN-END:variables
       private void armarCabecera() {
        this.modeloTabla.addColumn("ID");
        this.modeloTabla.addColumn("ID_MESA");
        this.modeloTabla.addColumn("DNI");
        this.modeloTabla.addColumn("Nombre");
        this.modeloTabla.addColumn("Fecha");
        this.modeloTabla.addColumn("Numero de mesa");
        jtReservas.setModel(modeloTabla);
    }

    public void cargarComboIdReserva() {
        ArrayList<Reserva> reservas = (ArrayList<Reserva>) reservaData.obtenerReservas();
        jcbReservaId.removeAllItems();
        for (Reserva r : reservas) {
            jcbReservaId.addItem(r);
        }
    }

    public void cargarComboNumero() {
     
            ArrayList<Reserva> reservas = (ArrayList<Reserva>) reservaData.obtenerReservas();
            jcbMesaId.removeAllItems();
            for (Reserva r : reservas) {
                if(r.getMesa()!=null){
                    jcbMesaId.addItem(r.getMesa().getNumero());
                }
                
            }
        
    }

    public void tablaCompleta() {
        borrarFilaTabla();
        ArrayList<Reserva> reservas = (ArrayList<Reserva>) reservaData.obtenerReservas();
        for (Reserva r : reservas) {
            modeloTabla.addRow(new Object[]{r.getId_reserva(), r.getMesa().getId_mesa(), r.getDni_cliente(), r.getNombre_cliente(), r.getFecha_reserva(), r.getMesa().getNumero()});
        }

    }

    public void tablaCompletaOrdenada() {
        borrarFilaTabla();
        ArrayList<Reserva> reservas = (ArrayList<Reserva>) reservaData.obtenerReservasOrden();
        for (Reserva r : reservas) {
            modeloTabla.addRow(new Object[]{r.getId_reserva(), r.getMesa().getId_mesa(), r.getDni_cliente(), r.getNombre_cliente(), r.getFecha_reserva(), r.getMesa().getNumero()});
        }
    }

    public void cargarDatos() {
        borrarFilaTabla();
        Reserva reservaSelec = (Reserva) jcbReservaId.getSelectedItem();
        if (reservaSelec != null) {
            int id = reservaSelec.getId_reserva();
            ArrayList<Reserva> reservas = (ArrayList<Reserva>) reservaData.obtenerReservasPorId(id);
            for (Reserva r : reservas) {
                modeloTabla.addRow(new Object[]{r.getId_reserva(), r.getMesa().getId_mesa(), r.getDni_cliente(), r.getNombre_cliente(), r.getFecha_reserva(), r.getMesa().getNumero()});
            }
        }
    }

    private void borrarFilaTabla() {
        int indice = modeloTabla.getRowCount() - 1;
        for (int i = indice; i >= 0; i--) {
            modeloTabla.removeRow(i);
        }

    }

    public void cargarDatosIdMesa() {
        borrarFilaTabla();
        int numero = (int) jcbMesaId.getSelectedItem();
        Mesa mesa = new Mesa();
        mesa = mesaData.obtenerMesaActivaPorNumero(numero);
      
        Reserva reservaSelec = reservaData.buscarReservaIdMesa(mesa.getId_mesa());
       
        if (reservaSelec != null) {
            ArrayList<Reserva> reservas = (ArrayList<Reserva>) reservaData.obtenerReservasPorId(reservaSelec.getId_reserva());
            for (Reserva r : reservas) {
               
                modeloTabla.addRow(new Object[]{r.getId_reserva(), r.getMesa().getId_mesa(), r.getDni_cliente(), r.getNombre_cliente(), r.getFecha_reserva(), r.getMesa().getNumero()});
            }
        }
    }

}
