/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package views;

import Entidades.*;
import persistencia.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.util.Locale;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Adriana
 */
public class ViewSalonMesa extends javax.swing.JInternalFrame {

    private MesaData mesaData;
    private MeseroData meseroData;
    private PedidoData pedidoData;
    private DetallePedidoData detallePedidoData;
    private ProductoData productoData;
    private Mesa mesa;
    private Mesero mesero;
    private Pedido pedido;
    private Producto producto;
    private DetallePedido detallePedido;

    private DefaultTableModel modeloTabla = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    private DefaultTableModel modeloTablaProducto = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }

    };

    public ViewSalonMesa() {

        mesaData = new MesaData();
        meseroData = new MeseroData();
        pedidoData = new PedidoData();
        detallePedidoData = new DetallePedidoData();
        mesa = new Mesa();
        mesero = new Mesero();
        pedido = new Pedido();
        detallePedido = new DetallePedido();
        producto = new Producto();
        productoData = new ProductoData();

        initComponents();
        cargarComboMozo();
        armarCabeceraMesas();
        cargarComboBebidas();
        cargarComboBebidas1();
        tablaCompleta();

        /*Ventana emergente*/
        armarCabeceraProductos();
        cargarComboBebidas();
        cargarComboBebidas1();
        cargarComboEntrada();
        cargarComboPlatoPrincipal();
        cargarComboPostre();

        // Configurar componentes
        jpAbrirMesa.setEnabled(false);
        jpAbrirMesa.setVisible(false);

        jsCantidadBebidas.setModel(new javax.swing.SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Valor inicial 0, mínimo 0, máximo Integer.MAX_VALUE, incremento 1
        jsCantidadBebidas1.setModel(new javax.swing.SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Valor inicial 0, mínimo 0, máximo Integer.MAX_VALUE, incremento 1
        jsCantidadEntrada.setModel(new javax.swing.SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Valor inicial 0, mínimo 0, máximo Integer.MAX_VALUE, incremento 1
        jsCantidaPP.setModel(new javax.swing.SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Valor inicial 0, mínimo 0, máximo Integer.MAX_VALUE, incremento 1
        jsCantidadPostre.setModel(new javax.swing.SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Valor inicial 0, mínimo 0, máximo Integer.MAX_VALUE, incremento 1
        jsCantidadPersonas.setModel(new javax.swing.SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1)); // Valor inicial 0, mínimo 0, máximo Integer.MAX_VALUE, incremento 1

        // Ajuste del ancho mínimo y preferido para evitar el corte de texto
        TableColumn nombreProductoColumn = jtProductos.getColumnModel().getColumn(1);
        TableColumn categoriaColumn = jtProductos.getColumnModel().getColumn(2);

        // Establecer un ancho mínimo y preferido para "Nombre producto" y "Categoría"
        nombreProductoColumn.setMinWidth(150); // Ajusta según el tamaño deseado
        nombreProductoColumn.setPreferredWidth(200);

        categoriaColumn.setMinWidth(100); // Ajusta según el tamaño deseado
        categoriaColumn.setPreferredWidth(150);

        // También puedes configurar para ajustar automáticamente el ancho
        jtProductos.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdpSalon = new javax.swing.JDesktopPane();
        jpAbrirMesa = new javax.swing.JPanel();
        jbAtras = new javax.swing.JButton();
        jTitulo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jcBebidas = new javax.swing.JComboBox<>();
        jcEntrada = new javax.swing.JComboBox<>();
        jsCantidaPP = new javax.swing.JSpinner();
        jsCantidadEntrada = new javax.swing.JSpinner();
        jcPlatoPrincipal = new javax.swing.JComboBox<>();
        jsCantidadBebidas = new javax.swing.JSpinner();
        jbAgregar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtProductos = new javax.swing.JTable();
        jbTomarPedido = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jcPostre = new javax.swing.JComboBox<>();
        jsCantidadPostre = new javax.swing.JSpinner();
        jbSalir = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jMesa1 = new javax.swing.JTextField();
        jMozo2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcBebidas1 = new javax.swing.JComboBox<>();
        jsCantidadBebidas1 = new javax.swing.JSpinner();
        jEliminarPPedido = new javax.swing.JButton();
        jpSalon = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtMesasActivas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jcbMeseros = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jsCantidadPersonas = new javax.swing.JSpinner();
        jbAbrirMesa = new javax.swing.JButton();
        jbSalir1 = new javax.swing.JButton();
        jbLiberar = new javax.swing.JButton();

        setTitle("Salon");

        jdpSalon.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpAbrirMesa.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jbAtras.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/back-button.png"))); // NOI18N
        jbAtras.setText("Atras");
        jbAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtrasActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jbAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 110, 40));

        jTitulo.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jTitulo.setText("<html><u>GESTIONAR PEDIDO</u></html> ");
        jpAbrirMesa.add(jTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 0, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel4.setText("Bebidas sin Alcohol:");
        jpAbrirMesa.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel5.setText("Entrada:");
        jpAbrirMesa.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, 20));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel6.setText("Plato Principal:");
        jpAbrirMesa.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, 20));

        jcBebidas.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jcBebidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcBebidasActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jcBebidas, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 116, 180, 30));

        jcEntrada.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jcEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 206, 180, 30));

        jsCantidaPP.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jsCantidaPP, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 256, 80, 30));

        jsCantidadEntrada.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jsCantidadEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 206, 80, 30));

        jcPlatoPrincipal.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jcPlatoPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 256, 180, 30));

        jsCantidadBebidas.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jsCantidadBebidas, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 116, 80, 30));

        jbAgregar.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbAgregar.setText("Agregar producto");
        jbAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jbAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 360, -1, 40));

        jScrollPane2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jtProductos.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jtProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id_Producto", "Nombre Producto", "Categoria", "Cantidad", "Precio", "Subtotal"
            }
        ));
        jScrollPane2.setViewportView(jtProductos);

        jpAbrirMesa.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 760, 230));

        jbTomarPedido.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbTomarPedido.setText("Tomar pedido");
        jbTomarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTomarPedidoActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jbTomarPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 370, 150, 40));

        jbActualizar.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbActualizar.setText("Actualizar pedido");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jbActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 370, 150, 40));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel7.setText("Postre:");
        jpAbrirMesa.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, 20));

        jcPostre.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jcPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 306, 180, 30));

        jsCantidadPostre.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jsCantidadPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 306, 80, 30));

        jbSalir.setBackground(new java.awt.Color(51, 51, 51));
        jbSalir.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbSalir.setForeground(new java.awt.Color(255, 255, 255));
        jbSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-cross-32.png"))); // NOI18N
        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jbSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 30, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel8.setText("Mesa:");
        jpAbrirMesa.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 50, 30));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel9.setText("Mozo:");
        jpAbrirMesa.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(496, 40, 60, 30));

        jMesa1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jMesa1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, 90, 30));

        jMozo2.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jMozo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, 150, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel3.setText("Bebidas con Alcohol:");
        jpAbrirMesa.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 130, 30));

        jcBebidas1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jcBebidas1.setToolTipText("");
        jpAbrirMesa.add(jcBebidas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 180, 30));

        jsCantidadBebidas1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpAbrirMesa.add(jsCantidadBebidas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 160, 80, 30));

        jEliminarPPedido.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jEliminarPPedido.setText("Eliminar Producto");
        jEliminarPPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEliminarPPedidoActionPerformed(evt);
            }
        });
        jpAbrirMesa.add(jEliminarPPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 370, 150, 40));

        jdpSalon.add(jpAbrirMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 10, 1220, 440));

        jpSalon.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtMesasActivas.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jtMesasActivas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtMesasActivas);

        jpSalon.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, 226));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel1.setText("Mozo: ");
        jpSalon.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 90, -1, 30));

        jcbMeseros.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jcbMeseros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMeserosActionPerformed(evt);
            }
        });
        jpSalon.add(jcbMeseros, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, 150, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel2.setText("Personas:");
        jpSalon.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 150, -1, 30));

        jsCantidadPersonas.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jpSalon.add(jsCantidadPersonas, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, 150, -1));

        jbAbrirMesa.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jbAbrirMesa.setText("Abrir mesa");
        jbAbrirMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbrirMesaActionPerformed(evt);
            }
        });
        jpSalon.add(jbAbrirMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 220, 150, 60));

        jbSalir1.setBackground(new java.awt.Color(51, 51, 51));
        jbSalir1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbSalir1.setForeground(new java.awt.Color(255, 255, 255));
        jbSalir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/icons8-cross-32.png"))); // NOI18N
        jbSalir1.setText("Salir");
        jbSalir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalir1ActionPerformed(evt);
            }
        });
        jpSalon.add(jbSalir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, -1, -1));

        jbLiberar.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbLiberar.setText("Liberar mesa");
        jbLiberar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLiberarActionPerformed(evt);
            }
        });
        jpSalon.add(jbLiberar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, 40));

        jdpSalon.add(jpSalon, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 738, 360));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jdpSalon, javax.swing.GroupLayout.DEFAULT_SIZE, 1199, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jdpSalon, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAbrirMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbrirMesaActionPerformed
        // TODO add your handling code here:

        int filaSelect = jtMesasActivas.getSelectedRow();

        // Verificar si se seleccionó una mesa
        if (filaSelect == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una mesa.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int personas = (int) jsCantidadPersonas.getValue();
        int capacidad = (int) jtMesasActivas.getValueAt(filaSelect, 2);

        // Verificar que la cantidad de personas sea válida para la capacidad de la mesa
        String disposicionActual = (String) jtMesasActivas.getValueAt(filaSelect, 3);

        if (personas <= 0 || personas > capacidad) {
            if (disposicionActual.equalsIgnoreCase("libre")) {
                JOptionPane.showMessageDialog(this, "La cantidad de personas no es válida para esta mesa.");
                return;
            }

        }

        int id_mesa = (int) jtMesasActivas.getValueAt(filaSelect, 0);
        int numeroMesa = (int) jtMesasActivas.getValueAt(filaSelect, 1); // Obtener el número de mesa

        mesa.setId_mesa(id_mesa);
        mesa.setNumero(numeroMesa); // Configurar el número de mesa
        mesa.setCapacidad(capacidad);

        // Cambiar la disposición solo si la mesa está actualmente "Libre"
        if (disposicionActual.equalsIgnoreCase("libre") && !disposicionActual.equalsIgnoreCase("atendida")) {
            mesa.setDisposicion("ocupada"); // Cambiar disposición a ocupada
            // Guardar el cambio de disposición en la base de datos
            mesaData.actualizarMesa(mesa); // Método para actualizar la mesa en la base de datos

        }

        // Mostrar el número de mesa en el campo jMesa1 en la pantalla de GESTIONAR PEDIDO y centrar el texto
        jMesa1.setText(String.valueOf(numeroMesa));
        jMesa1.setHorizontalAlignment(javax.swing.JTextField.CENTER); // Centrar el texto en jMesa1
        jMesa1.setEditable(false); // Hacer el campo no editable

        // Obtener el nombre del mozo seleccionado y asignarlo a jMozo2
        String mozoSeleccionado = jcbMeseros.getSelectedItem().toString();
        jMozo2.setText(mozoSeleccionado);
        jMozo2.setHorizontalAlignment(javax.swing.JTextField.CENTER); // Centrar el texto en jMozo2
        jMozo2.setEditable(false); // Hacer el campo no editable

        // Asignar mesero y crear pedido
        mesero = (Mesero) jcbMeseros.getSelectedItem();
        pedido.setMesero(mesero);
        pedido.setFecha_pedido(LocalDate.now());
        pedido.setHora_pedido(LocalTime.now());
        pedido.setEstado(true);
        
        
        //PARA FERIFICAR SI MESA NO ESTA ASICIADO A UN PEDIDO ACTIVO
        ArrayList<Pedido> pedidosDia = (ArrayList<Pedido>) pedidoData.obtenerPedidosDelDia();
        int cont = 0;
        
        //SI NO EXISTEN DATOS EN LA BASE DE DATOS
        if (pedidosDia.size() == 0) {
            pedido.setMesa(mesa);
            // Guardar el pedido en la base de datos
            pedidoData.cargarPedido(pedido);
            cont++;
        }
        
        
       //RECORREMOS LOS PEDIDOS EN LA BASE
        for (Pedido p : pedidosDia) {
            int id = p.getMesa().getId_mesa();
            if (id == id_mesa) {
                cont++;
            }
        }
        //EN CASO DE NO ENCONTRAR CONINCIDENCIAS CON LA ID MESA, SE CREA UN PEDIDO NUEVO
        if (cont == 0) {
            pedido.setMesa(mesa);
            // Guardar el pedido en la base de datos
            pedidoData.cargarPedido(pedido);//CAMBIAR DE LUGAR A TOMAR PEDIDO
        }else{
            pedido = pedidoData.buscarPedidoPorIdMesa(id_mesa);
            List<DetallePedido> detalleRecuperados= detallePedidoData.listarDetallesPorPedido(pedido.getId_pedido());
            for(DetallePedido dp : detalleRecuperados){
                 modeloTablaProducto.addRow(new Object[]{dp.getProducto().getId_producto(), 
                 dp.getProducto().getNombre(), 
                 dp.getProducto().getCategoria(),
                 dp.getCantidad(), dp.getPrecio_unitario(),
                 dp.getSub_total()});
                 jbTomarPedido.setEnabled(false);
            }
            
        }

        // Mantener visible la interfaz de la mesa, para que puedan agregarse más pedidos a la misma
        jpSalon.setEnabled(false);
        jpSalon.setVisible(false);
        jpAbrirMesa.setEnabled(true);
        jpAbrirMesa.setVisible(true);


    }//GEN-LAST:event_jbAbrirMesaActionPerformed

    private void jcbMeserosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMeserosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbMeserosActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbTomarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTomarPedidoActionPerformed
        // TODO add your handling code here:

        // Obtener el total de las filas
        int totalFilas = jtProductos.getRowCount();
        boolean flag = false;

        // Comprobar que existan filas en la tabla
        if (totalFilas > 0) {
            // Opciones personalizadas para los botones
            Object[] opciones = {"Sí", "No"};
            int confirm = JOptionPane.showOptionDialog(this,
                    "¿Confirma el pedido?",
                    "Confirmación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opciones,
                    opciones[0]);

            if (confirm == JOptionPane.YES_OPTION) {
                flag = true;
                double total = 0;

                // Iterar por cada fila de la tabla
                for (int fila = 0; fila < totalFilas; fila++) {
                    // Extraer los valores de cada columna en la fila actual
                    int id_producto = (int) jtProductos.getValueAt(fila, 0); // ID_Producto
                    String nombre = (String) jtProductos.getValueAt(fila, 1); // Nombre Producto
                    String categoria = (String) jtProductos.getValueAt(fila, 2); // Categoría
                    int cantidad = (int) jtProductos.getValueAt(fila, 3); // Cantidad

                    // Convertir el precio de String a Double, quitando el símbolo de pesos
                    String precioStr = (String) jtProductos.getValueAt(fila, 4); // Precio como String
                    double precio = Double.parseDouble(precioStr.replace("$", "").replace(",", "."));

                    // Calcular el subtotal para esta fila
                    double subtotal = precio * cantidad;

                    // Actualizar la columna de subtotal en la tabla con formato de pesos
                    String subtotalConSigno = "$" + String.format("%.2f", subtotal);
                    jtProductos.setValueAt(subtotalConSigno, fila, 5);

                    // Configurar los detalles del pedido
                    detallePedido.setCantidad(cantidad);
                    detallePedido.setProducto(productoData.buscarProductoPorId(id_producto));
                    detallePedido.setPrecio_unitario(precio);
                    detallePedido.setSub_total(subtotal);

                    // Acumular el total del pedido
                    total += subtotal;

                    // Actualizar el pedido en la base de datos
                    pedidoData.actualizarMontoTotal(pedido.getId_pedido(), total);
                    detallePedido.setPedido(pedido);
                    detallePedidoData.agregarDetallePedido(detallePedido);

                    mesa = pedido.getMesa();
                    mesa.setDisposicion("atendida");
                    mesaData.actualizarDisposicionMesa(mesa);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay productos seleccionados.");
        }

        if (flag) {
            borrarFilaTabla();

        }


    }//GEN-LAST:event_jbTomarPedidoActionPerformed

    private void jbAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarActionPerformed
        // TODO add your handling code here:
        int bebidas = (int) jsCantidadBebidas.getValue();
        int bebidas1 = (int) jsCantidadBebidas1.getValue();
        int entrada = (int) jsCantidadEntrada.getValue();
        int platoP = (int) jsCantidaPP.getValue();
        int postre = (int) jsCantidadPostre.getValue();

        int[] cantidades = {bebidas, bebidas1, entrada, platoP, postre};

        boolean hayCantidadMayorQueCero = false;

        for (int cantidad : cantidades) {
            if (cantidad > 0) {
                hayCantidadMayorQueCero = true;
                break;
            }
        }

        if (hayCantidadMayorQueCero) {

            if (bebidas > 0) {
                Producto producto = (Producto) jcBebidas.getSelectedItem();
                cargarProductos(producto, bebidas);
                jsCantidadBebidas.setValue(0);
            }
            if (bebidas1 > 0) {
                Producto producto = (Producto) jcBebidas1.getSelectedItem();
                cargarProductos(producto, bebidas1);
                jsCantidadBebidas1.setValue(0);
            }
            if (entrada > 0) {
                Producto producto = (Producto) jcEntrada.getSelectedItem();
                cargarProductos(producto, entrada);
                jsCantidadEntrada.setValue(0);
            }
            if (platoP > 0) {
                Producto producto = (Producto) jcPlatoPrincipal.getSelectedItem();
                cargarProductos(producto, platoP);
                jsCantidaPP.setValue(0);
            }
            if (postre > 0) {
                Producto producto = (Producto) jcPostre.getSelectedItem();
                cargarProductos(producto, postre);
                jsCantidadPostre.setValue(0);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna opción.");
        }
    }//GEN-LAST:event_jbAgregarActionPerformed

    private void jcBebidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcBebidasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcBebidasActionPerformed

    private void jbAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtrasActionPerformed
        // TODO add your handling code here:
        jpSalon.setEnabled(true);
        jpSalon.setVisible(true);
        jpAbrirMesa.setEnabled(false);
        jpAbrirMesa.setVisible(false);
    }//GEN-LAST:event_jbAtrasActionPerformed

    private void jbSalir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalir1ActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jbSalir1ActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:
        //Actualizar pedidos 
        int filaSeleccionada = jtProductos.getSelectedRow();

        if (filaSeleccionada != -1) {
            try {
                int cantidad = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese la nueva cantidad:", "Actualizar cantidad", JOptionPane.QUESTION_MESSAGE));

                if (cantidad > 0) {
                    // Obtener el precio de la columna correspondiente en la tabla
                    String precioConSigno = (String) jtProductos.getValueAt(filaSeleccionada, 4);
                    double precio = Double.parseDouble(precioConSigno.replace("$", "").replace(",", "."));

                    // Calcular el nuevo subtotal
                    double subtotal = precio * cantidad;

                    // Formatear el subtotal con el símbolo de pesos
                    String subtotalConSigno = "$" + String.format("%.2f", subtotal);

                    // Actualizar los valores de cantidad y subtotal en la tabla
                    jtProductos.setValueAt(cantidad, filaSeleccionada, 3);  // Columna de cantidad
                    jtProductos.setValueAt(subtotalConSigno, filaSeleccionada, 5);  // Columna de subtotal
                } else {
                    JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a cero.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor numérico válido.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fila para actualizar.", "Error", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jEliminarPPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEliminarPPedidoActionPerformed

        int filaSeleccionada = jtProductos.getSelectedRow();

        if (filaSeleccionada != -1) {
            // Opciones personalizadas para los botones
            Object[] opciones = {"Sí", "No"};
            int confirm = JOptionPane.showOptionDialog(this,
                    "¿Desea eliminar el producto?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opciones,
                    opciones[0]);

            if (confirm == JOptionPane.YES_OPTION) {
                // Eliminar la fila de la tabla
                modeloTablaProducto.removeRow(filaSeleccionada);
                JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto para eliminar.", "Error", JOptionPane.WARNING_MESSAGE);

        }


    }//GEN-LAST:event_jEliminarPPedidoActionPerformed

    private void jbLiberarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLiberarActionPerformed
        
   
    // Verificar si se seleccionó una mesa
    int filaSelect = jtMesasActivas.getSelectedRow();

    if (filaSelect == -1) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una mesa.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int id_mesa = (int) jtMesasActivas.getValueAt(filaSelect, 0);
    mesa = mesaData.obtenerMesaActivaPorId(id_mesa);

    // Actualizar disposición de la mesa a "libre"
    mesa.setDisposicion("libre");
    mesaData.actualizarDisposicionMesa(mesa);

    // Mostrar mensaje de confirmación
    JOptionPane.showMessageDialog(this, "Mesa Liberada");

    // Opcional: Actualizar la tabla para reflejar el cambio en la disposición de la mesa
    jtMesasActivas.setValueAt("libre", filaSelect, 3);



    }//GEN-LAST:event_jbLiberarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jEliminarPPedido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jMesa1;
    private javax.swing.JTextField jMozo2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jTitulo;
    private javax.swing.JButton jbAbrirMesa;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbAgregar;
    private javax.swing.JButton jbAtras;
    private javax.swing.JButton jbLiberar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JButton jbSalir1;
    private javax.swing.JButton jbTomarPedido;
    private javax.swing.JComboBox<Producto> jcBebidas;
    private javax.swing.JComboBox<Producto> jcBebidas1;
    private javax.swing.JComboBox<Producto> jcEntrada;
    private javax.swing.JComboBox<Producto> jcPlatoPrincipal;
    private javax.swing.JComboBox<Producto> jcPostre;
    private javax.swing.JComboBox<Mesero> jcbMeseros;
    private javax.swing.JDesktopPane jdpSalon;
    private javax.swing.JPanel jpAbrirMesa;
    private javax.swing.JPanel jpSalon;
    private javax.swing.JSpinner jsCantidaPP;
    private javax.swing.JSpinner jsCantidadBebidas;
    private javax.swing.JSpinner jsCantidadBebidas1;
    private javax.swing.JSpinner jsCantidadEntrada;
    private javax.swing.JSpinner jsCantidadPersonas;
    private javax.swing.JSpinner jsCantidadPostre;
    private javax.swing.JTable jtMesasActivas;
    private javax.swing.JTable jtProductos;
    // End of variables declaration//GEN-END:variables
    private void borrarFilaTabla() {
        int indice = modeloTablaProducto.getRowCount() - 1;
        for (int i = indice; i >= 0; i--) {
            modeloTablaProducto.removeRow(i);
        }
    }

    private void armarCabeceraMesas() {
        this.modeloTabla.addColumn("ID");
        this.modeloTabla.addColumn("N° Mesa");
        this.modeloTabla.addColumn("Capacidad");
        this.modeloTabla.addColumn("Disposicion");
        jtMesasActivas.setModel(modeloTabla);
    }

    private void armarCabeceraProductos() {
        this.modeloTablaProducto.addColumn("ID_Producto");
        this.modeloTablaProducto.addColumn("Nombre producto");
        this.modeloTablaProducto.addColumn("Categoria");
        this.modeloTablaProducto.addColumn("Cantidad");
        this.modeloTablaProducto.addColumn("Precio");
        this.modeloTablaProducto.addColumn("Subtotal");
        jtProductos.setModel(modeloTablaProducto);

        // Establecer fuente y colores de fondo y texto para el encabezado de la tabla
        jtProductos.getTableHeader().setFont(new Font("Segoe UI", Font.ITALIC, 14));
        jtProductos.getTableHeader().setOpaque(false);
        jtProductos.getTableHeader().setBackground(new Color(30, 144, 255)); // Azul para el encabezado
        jtProductos.getTableHeader().setForeground(new Color(23, 32, 42)); // Color de texto del encabezado
        jtProductos.setRowHeight(25);

        // Crear un renderizador para centrar el texto del encabezado de la tabla
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER); // Centrar texto en el encabezado
        headerRenderer.setBackground(new Color(30, 144, 255)); // Color de fondo del encabezado

        // Crear un renderizador para centrar, establecer colores y aplicar estilos a las celdas de datos de la tabla
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Centramos el texto en las celdas
                setHorizontalAlignment(SwingConstants.CENTER);

                if (isSelected) {
                    c.setBackground(new Color(169, 169, 169)); // Color de fondo al seleccionar (azul claro)
                    c.setForeground(Color.WHITE); // Color de texto al seleccionar (blanco)
                } else {
                    c.setBackground(new Color(245, 245, 245)); // Color de fondo normal de las celdas (gris claro)
                    c.setForeground(Color.BLACK); // Color de texto normal (negro)
                }

                return c;
            }
        };

        // Aplicar el renderizador personalizado a cada columna para el encabezado y las celdas
        for (int i = 0; i < jtProductos.getColumnModel().getColumnCount(); i++) {
            jtProductos.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            jtProductos.getColumnModel().getColumn(i).setCellRenderer(cellRenderer); // Aplica el centrado y los colores en celdas
        }

    }

    public void tablaCompleta() {
        ArrayList<Mesa> mesas = (ArrayList<Mesa>) mesaData.listarMesas();
        for (Mesa m : mesas) {
            modeloTabla.addRow(new Object[]{m.getId_mesa(), m.getNumero(), m.getCapacidad(), m.getDisposicion()});
        }

        // Establecer fuente y colores de fondo y texto para el encabezado de la tabla
        jtMesasActivas.getTableHeader().setFont(new Font("Segoe UI", Font.ITALIC, 14));
        jtMesasActivas.getTableHeader().setOpaque(false);
        jtMesasActivas.getTableHeader().setBackground(new Color(30, 144, 255)); // Azul para el encabezado
        jtMesasActivas.getTableHeader().setForeground(new Color(23, 32, 42)); // Color de texto del encabezado
        jtMesasActivas.setRowHeight(25);

        // Crear un renderizador para centrar el texto del encabezado de la tabla
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER); // Centrar texto en el encabezado
        headerRenderer.setBackground(new Color(30, 144, 255)); // Color de fondo del encabezado

        // Crear un renderizador para centrar, establecer colores y aplicar estilos a las celdas de datos de la tabla
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Centramos el texto en las celdas
                setHorizontalAlignment(SwingConstants.CENTER);

                if (isSelected) {
                    c.setBackground(new Color(169, 169, 169)); // Color de fondo al seleccionar (azul claro)
                    c.setForeground(Color.WHITE); // Color de texto al seleccionar (blanco)
                } else {
                    c.setBackground(new Color(245, 245, 245)); // Color de fondo normal de las celdas (gris claro)
                    c.setForeground(Color.BLACK); // Color de texto normal (negro)
                }

                return c;
            }
        };

        // Aplicar el renderizador personalizado a cada columna para el encabezado y las celdas
        for (int i = 0; i < jtMesasActivas.getColumnModel().getColumnCount(); i++) {
            jtMesasActivas.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
            jtMesasActivas.getColumnModel().getColumn(i).setCellRenderer(cellRenderer); // Aplica el centrado y los colores en celdas
        }

    }

    private void cargarComboMozo() {
        ArrayList<Mesero> meseros = (ArrayList<Mesero>) meseroData.listarMeseros();

        jcbMeseros.removeAllItems();
        for (Mesero mesero : meseros) {

            jcbMeseros.addItem(mesero);
        }

    }

    private void cargarComboBebidas() {
        ArrayList<Producto> prodcutos = (ArrayList<Producto>) productoData.listarProductos();
        jcBebidas.removeAllItems();
        for (Producto p : prodcutos) {
            if (p.getCategoria().equalsIgnoreCase("Bebida sin Alcohol")) {
                jcBebidas.addItem(p);
            }
        }

    }

    private void cargarComboBebidas1() {
        ArrayList<Producto> productos = (ArrayList<Producto>) productoData.listarProductos();
        jcBebidas1.removeAllItems();
        for (Producto p : productos) {
            if (p.getCategoria().equalsIgnoreCase("Bebida con Alcohol")) {
                jcBebidas1.addItem(p); // Añade Producto directamente
            }
        }
    }

    private void cargarComboEntrada() {
        ArrayList<Producto> prodcutos = (ArrayList<Producto>) productoData.listarProductos();
        jcEntrada.removeAllItems();
        for (Producto p : prodcutos) {
            if (p.getCategoria().equalsIgnoreCase("entrada")) {
                jcEntrada.addItem(p);
            }
        }

    }

    private void cargarComboPlatoPrincipal() {
        ArrayList<Producto> prodcutos = (ArrayList<Producto>) productoData.listarProductos();
        jcPlatoPrincipal.removeAllItems();
        for (Producto p : prodcutos) {
            if (p.getCategoria().trim().equalsIgnoreCase("plato principal")) {
                jcPlatoPrincipal.addItem(p);
            }
        }

    }

    private void cargarComboPostre() {
        ArrayList<Producto> prodcutos = (ArrayList<Producto>) productoData.listarProductos();
        jcPostre.removeAllItems();
        for (Producto p : prodcutos) {
            if (p.getCategoria().equalsIgnoreCase("postre")) {
                jcPostre.addItem(p);
            }
        }

    }

    public void cargarProductos(Producto producto, int cantidad) {
        Producto productoSelect = producto;
        if (productoSelect != null) {
            double precio = productoSelect.getPrecio();
            double subtotal = precio * cantidad;

            // Formateamos los valores de precio y subtotal con el símbolo de pesos
            String precioConSigno = "$" + String.format("%.2f", precio);
            String subtotalConSigno = "$" + String.format("%.2f", subtotal);

            // Agregamos una fila a la tabla con los campos formateados
            modeloTablaProducto.addRow(new Object[]{
                productoSelect.getId_producto(), // ID_Producto
                productoSelect.getNombre(), // Nombre Producto
                productoSelect.getCategoria(), // Categoria
                cantidad, // Cantidad
                precioConSigno, // Precio con símbolo de pesos
                subtotalConSigno // Subtotal con símbolo de pesos
            });
        }
    }
}
