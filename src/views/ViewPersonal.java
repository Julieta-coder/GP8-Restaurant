/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package views;

import Entidades.Mesero;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.List;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import persistencia.MeseroData;

/**
 *
 * @author nelso
 */
public class ViewPersonal extends javax.swing.JInternalFrame {

    DefaultTableModel modelo = new DefaultTableModel(){
    public boolean isCellEditable(int row, int column) {
        return false; // Todas las celdas no son editables
    }
    };
    private MeseroData meseroData = new MeseroData();

    /**
     * Creates new form ViewPersonal
     */
    public ViewPersonal() {
        initComponents();

        String[] cabecera = {"Id", "Nombre", "Apellido", "Fecha Registro", "Estado"};
        modelo.setColumnIdentifiers(cabecera);
        jtPersonal.setModel(modelo);

        cargarDatos(); // Cargar los datos en la tabla al iniciar
    
        
        // Establecer fuente y colores de fondo y texto para el encabezado de la tabla
        jtPersonal.getTableHeader().setFont(new Font("Segoe UI", Font.ITALIC, 14));
        jtPersonal.getTableHeader().setOpaque(false);
        jtPersonal.getTableHeader().setBackground(new Color(30, 144, 255)); // Azul para el encabezado
        jtPersonal.getTableHeader().setForeground(new Color(23, 32, 42)); // Color de texto del encabezado
        jtPersonal.setRowHeight(25);

        // Crear un renderizador para centrar el texto del encabezado de la tabla
        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
         headerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER); // Centrar texto en el encabezado
         headerRenderer.setBackground(new Color(30, 144, 255)); // Color de fondo del encabezado

        // Crear un renderizador para centrar, establecer colores y aplicar estilos a las celdas de datos de la tabla
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
        // Centramos el texto en las celdas
        setHorizontalAlignment(SwingConstants.CENTER);
        
        if (isSelected) {
            c.setBackground(new Color(169, 169, 169)); // Color de fondo al seleccionar (azul claro)
            c.setForeground(Color.WHITE); // Color de texto al seleccionar (blanco)
        } else {
            c.setBackground(new Color(245, 245, 245)); // Color de fondo normal de las celdas (gris claro)
            c.setForeground(Color.BLACK); // Color de texto normal (negro)
        }
        
        return c;
    }
};
     
        // Aplicar el renderizador personalizado a cada columna para centrar los datos
        for (int i = 0; i < jtPersonal.getColumnModel().getColumnCount(); i++) {
        jtPersonal.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
}

        // Aplicar el renderizador personalizado al encabezado de cada columna
        for (int i = 0; i < jtPersonal.getColumnModel().getColumnCount(); i++) {
         jtPersonal.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
}

        // Configurar para ajustar automáticamente el ancho
        jtPersonal.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        
             
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtPersonal = new javax.swing.JTable();
        jbAlta = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jbBaja = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jlImagen = new javax.swing.JLabel();
        jlFondo = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtPersonal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(jtPersonal);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, 360));

        jbAlta.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbAlta.setText("Alta");
        jbAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAltaActionPerformed(evt);
            }
        });
        getContentPane().add(jbAlta, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 260, 80, -1));

        jbEliminar.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbEliminar.setText("Eliminar");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jbEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 350, 80, -1));

        jbSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cruz.png"))); // NOI18N
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });
        getContentPane().add(jbSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 10, 30, 30));

        jbBaja.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jbBaja.setText("Baja");
        jbBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBajaActionPerformed(evt);
            }
        });
        getContentPane().add(jbBaja, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 300, 80, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jLabel1.setText("LISTADO DEL PERSONAL");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, -1, -1));

        jlImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/busqueda.png"))); // NOI18N
        getContentPane().add(jlImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, -1, -1));

        jlFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo grande.png"))); // NOI18N
        jlFondo.setText("jLabel1");
        getContentPane().add(jlFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAltaActionPerformed
        // TODO add your handling code here:
        int selectedRow = jtPersonal.getSelectedRow();
        
        if (selectedRow == -1){
        
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila.");
            return;
        }
        
        
         int idMesero = (int) jtPersonal.getValueAt(selectedRow, 0);
         String estadoActual = jtPersonal.getValueAt(selectedRow, 4).toString();

    // Verificamos si el mesero ya está activo
    if (estadoActual.equals("Activo")) {
        javax.swing.JOptionPane.showMessageDialog(this, "El mesero ya está activo.");
    } else {
        try {
            if (meseroData.actualizarEstadoMesero(idMesero, true)) { // true para activar
                jtPersonal.setValueAt("Activo", selectedRow, 4);
                javax.swing.JOptionPane.showMessageDialog(this, "Mesero activado exitosamente.");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No se pudo activar el mesero.");
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al activar el mesero: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jbAltaActionPerformed
    
    private void jbBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBajaActionPerformed
        // TODO add your handling code here:
        
                 int selectedRow = jtPersonal.getSelectedRow();
    
    if (selectedRow == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila.");
    } 
         int idMesero = (int) jtPersonal.getValueAt(selectedRow, 0);
         String estadoActual = jtPersonal.getValueAt(selectedRow, 4).toString();

    // Verificamos si el mesero ya está inactivo
    if (estadoActual.equals("Inactivo")) {
        javax.swing.JOptionPane.showMessageDialog(this, "El mesero ya está inactivo.");
    } else {
        try {
            if (meseroData.actualizarEstadoMesero(idMesero, false)) { // false para inactivar
                jtPersonal.setValueAt("Inactivo", selectedRow, 4);
                javax.swing.JOptionPane.showMessageDialog(this, "Mesero inactivado exitosamente.");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No se pudo inactivar el mesero.");
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al inactivar el mesero: " + e.getMessage());
        }
    }
    
    }//GEN-LAST:event_jbBajaActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        // TODO add your handling code here:
        int selectedRow = jtPersonal.getSelectedRow();

    if (selectedRow == -1) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila para eliminar.");
        return;
    }

    int idMesero = (int) jtPersonal.getValueAt(selectedRow, 0);
    int confirmacion = javax.swing.JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este mesero?", "Confirmar Eliminación", javax.swing.JOptionPane.YES_NO_OPTION);

    if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
        try {
            if (meseroData.eliminarMesero(idMesero)) {
                modelo.removeRow(selectedRow); // Elimina la fila de la tabla
                javax.swing.JOptionPane.showMessageDialog(this, "Mesero eliminado exitosamente.");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No se pudo eliminar el mesero.");
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error al eliminar el mesero: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jbEliminarActionPerformed

    
    private void cargarDatos() {
        // Limpiar el modelo antes de cargar datos
        modelo.setRowCount(0);

        List<Mesero> meseros = meseroData.listarPersonal();
        for (Mesero mesero : meseros) {
            Object[] fila = new Object[5];
            fila[0] = mesero.getId_mesero();
            fila[1] = mesero.getNombre();
            fila[2] = mesero.getApellido();
            fila[3] = mesero.getFecha_registro();
            fila[4] = mesero.isEstado() ? "Activo" : "Inactivo"; // Convertir el estado booleano en texto

            modelo.addRow(fila);
        }
    
    }
        
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAlta;
    private javax.swing.JButton jbBaja;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbSalir;
    private javax.swing.JLabel jlFondo;
    private javax.swing.JLabel jlImagen;
    private javax.swing.JTable jtPersonal;
    // End of variables declaration//GEN-END:variables
}
